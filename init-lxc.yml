---
- name: Setup lxc compute, storage and netmon units
  hosts: clusterHosts
  # at least two storage, two netmon, and three compute for HA
  tasks:
    - name: Ensure dependencies for lxc are satisfied
      package:
        name:
          - lxc
          - python3
          - python3-lxc
        state: latest

    - name: Ensure compute lxc unit is available
      community.general.lxc_container:
        name: compute
#        container_log: true
        template: debian
        state: started
#        backing_store: lvm
        template_options: --release bookworm
        container_command: |
          apt-get update
          apt-get install -y docker.io
      register: compute_info
    - debug:
        msg: "{{ compute_info.lxc_container.ips }}"

    - name: Ensure netmon lxc unit is available
      community.general.lxc_container:
        name: netmon
#        container_log: true
        template: debian
        state: started
#        backing_store: lvm
        template_options: --release bookworm
        container_command: |
          apt-get update
          apt-get install -y docker.io
      register: netmon_info
    - debug:
        msg: "{{ netmon_info.lxc_container.ips }}"

    - name: Ensure storage lxc unit is available
      community.general.lxc_container:
        name: storage
#        container_log: true
        template: debian
        state: started
#        backing_store: lvm
        template_options: --release bookworm
        container_command: |
          apt-get update
          apt-get install -y nfs-kernel-server
      register: storage_info
    - debug:
        msg: "{{ storage_info.lxc_container.ips }}"


    - name: DNAT to netmon
      ansible.builtin.iptables:
        table: nat
        chain: PREROUTING
        in_interface: wg0
        protocol: tcp
        #match: tcp
        destination_port: 443
        jump: DNAT
        to_destination: "{{ netmon_info.lxc_container.ips[0] }}"
        comment: Redirect 443 traffic to netmon
      become: yes

    - name: DNAT to storage
      ansible.builtin.iptables:
        table: nat
        chain: PREROUTING
        in_interface: wg0
        protocol: tcp
        #match: tcp
        destination_port: 2222
        jump: DNAT
        to_destination: "{{ storage_info.lxc_container.ips[0] }}"
        comment: Redirect 2222 traffic to storage
      become: yes

    - name: Port map to storage
      ansible.builtin.iptables:
        table: nat
        chain: PREROUTING
        #in_interface: wg0
        protocol: tcp
        #match: tcp
        destination_port: 2222
        destination: "{{ storage_info.lxc_container.ips[0] }}"
        jump: REDIRECT
        to_ports: 22
        comment: Redirect 2222 -> 22 traffic to storage
      become: yes

    - name: DNAT to compute
      ansible.builtin.iptables:
        table: nat
        chain: PREROUTING
        in_interface: wg0
        protocol: all
        #match: tcp
        jump: DNAT
        to_destination: "{{ compute_info.lxc_container.ips[0] }}"
        comment: Redirect all traffic to storage
      become: yes

# use lvm_container_info to extract main IP address; use that IP addr to setup targeted firewall forwarding rules on the node towards units, according to each the unit type
# traffic to be redirected without SNAT comes from wg0, nothing ever goes to the clearnet, except user traffic to and from compute nodes

# consider using lvm insead of dir as fs source, for better enforcing storage limits
