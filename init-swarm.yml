# set global variable once using the 'target self' trick
- hosts: swarmManagers:swarmWorkers
  tasks:
    - set_fact:
        # this is a global variable
        managers_list: []

# scroll through managers and collect list of managers
- name: Fetch list of all available managers
  hosts: swarmManagers
  become: true
  tasks:
    - block:
      - name: Ensure jq is installed in manager node
        package:
          name: jq
          state: present
      - name: Check if there is at least one manager in the swarm
        shell: docker info -f {{ '"' + '{{json .Swarm.RemoteManagers }}' + '"' }} | jq '.[].Addr' | cut -d'"' -f 2
        register: manager_report
      - set_fact:
          managers_list: "{{ manager_report.stdout_lines }}"

# managers are aligned once so they all know (including swarmManager[0]) the starting situation in the cluster
- name: Align all managers on managers_list
  hosts: swarmManagers
  tasks:
    - set_fact:
        managers_list: "{{ (managers_list + hostvars[item]['managers_list']) | unique }}"
      loop: "{{ groups['swarmManagers'] }}"
    - debug:
        msg: "{{ managers_list }}"

# - hosts: 127.0.0.1
#   tasks:
#     - name: Debug managers list
#       debug:
#         msg: "{{ managers_list }}"
#       when: 'managers_list | length > 0'

# init swarm in the first manager not that comes up, if managers_list is empty
- name: Bootstrap Swarm in manager 0
  hosts: swarmManagers[0]
  tasks:
    - debug:
        msg: "{{ inventory_hostname }}"
    - name: Initialize swarm in first manager, and fetch access tokens
      block:
      - name: Initialize Swarm in original manager
        community.docker.docker_swarm:
          state: present
        register: manager_metadata
      - debug:
          msg: "{{ manager_metadata }}"   
      - name: Fetch original manager's address
        shell: docker info -f {{ '"' + '{{json .Swarm.RemoteManagers }}' + '"' }} | jq '.[].Addr' | cut -d'"' -f 2
        register: manager_report
      - name: Add original manager's address to managers_list
        set_fact:
          managers_list: "{{ managers_list + [manager_report.stdout_lines[0]]}}"
      when: 'managers_list | length == 0'


- name: Check swarm status (again if bootstrap was necessary) and set manager_token and worker_token
  hosts: swarmManagers[0]
  tasks:
    - name: Initialize Swarm in original manager
      community.docker.docker_swarm:
        state: present
      register: manager_metadata
    - name: Fetch original manager's address
      shell: docker info -f {{ '"' + '{{json .Swarm.RemoteManagers }}' + '"' }} | jq '.[].Addr' | cut -d'"' -f 2
      register: manager_report
    - name: Set manager_token, worker_token and add original manager's address to managers_list
      set_fact:
        manager_token: "{{ manager_metadata.swarm_facts.JoinTokens.Manager }}"
        worker_token: "{{ manager_metadata.swarm_facts.JoinTokens.Worker }}"


- name: Align all swarm hosts' facts with manager 0
  hosts: swarmManagers:swarmWorkers
  tasks:
    - set_fact:
        managers_list: "{{ hostvars[groups['swarmManagers'][0]]['managers_list'] }}"
        manager_token: "{{ hostvars[groups['swarmManagers'][0]]['manager_token'] }}"
        worker_token: "{{ hostvars[groups['swarmManagers'][0]]['worker_token'] }}"
        # "{{ (managers_list + hostvars[item]['managers_list']) | unique }}"
        # manager_token: "{{ (manager_token + hostvars[item]['manager_token']) | unique }}"
        # worker_token: "{{ (worker_token + hostvars[item]['worker_token']) | unique }}"
      #loop: "{{ groups['swarmManagers'] + groups['swarmWorkers'] | unique }}"

- name: Ensure all swarm hosts join the swarm
  hosts: swarmManagers:swarmWorkers
  tasks:
    - debug:
        msg: 
          - "{{ ('swarmManagers' in group_names) |ternary(manager_token, worker_token) }}"
          - "{{ managers_list }}"
    - name: Add node to swarm
      community.docker.docker_swarm:
        state: join
        join_token: "{{ ('swarmManagers' in group_names) |ternary(manager_token, worker_token) }}"
        remote_addrs: "{{ managers_list }}"

- name: Deploy swarmpit to manager nodes
  hosts: swarmManagers
  vars:
    random_manager: "{{ groups['swarmManagers'] | random }}"
  tasks:
    - community.docker.docker_swarm_service:
        name: swarmpit
        image: swarmpit/install:1.9
        placement:
          constraints:
            - node.role == manager
        replicas: 1
        restart_config:
          condition: none
        env:
          INTERACTIVE: '0'
          APP_PORT: '888'
          ADMIN_USERNAME: 'swarmpit'
          ADMIN_PASSWORD: '{{ swarmpit_password }}'
        mounts:
          - source: /var/run/docker.sock
            target: /var/run/docker.sock
      when: 'inventory_hostname == random_manager'

# - hosts: 127.0.0.1
#   tasks:
#     - name: Debug manager token
#       debug:
#         msg: "{{ manager_token }}"
#     - name: Debug worker token
#       debug:
#         msg: "{{ worker_token }}"
#     - name: Debug new managers list
#       debug:
#         msg: "{{ managers_list }}"

# - name: Apply swarm
#   hosts: swarmManagers:swarmWorkers
#   gather_facts: False
#   tasks:
#     - name: Debug targeted token 
#       debug:
#         msg: "{{ 'swarmManagers' in group_names | ternary(manager_token, worker_token) }}"




















































    # - community.docker.docker_swarm:
    #     state: join
    #     join_token: '{{ "swarmManagers" in group_names|ternary(manager_token, worker_token) }}'
    #     remote_addrs: "{{ managers_list }}"
      

  
    # - shell: docker info -f {{ '"' + '{{json .Swarm.NodeID }}' + '"' }}
    #   register: node_id
    # - name: Debug nodes in swarm
    #   debug:
    #     msg: "{{ node_id.stdout_lines[0] }}"


    # - name: Debug token for node
    #   debug:
    #     msg: '{{ "swarmManagers" in group_names|ternary(manager_token, worker_token) }}'


    # - block:
    #   - name: Add node to swarm
    #     community.docker.docker_swarm:
    #       state: join
    #       advertise_addr: 192.168.1.2
    #       join_token: '{{ "swarmManagers" in group_names|ternary(manager_token, worker_token) }}'
    #       remote_addrs: "{{ managers_list }}"
    #   # this is the value when docker info returns "" as NodeID, meaning the node is not part of a swarm
    #   when: 'node_id.stdout_lines[0] == "\"\""'


# - hosts: testHosts
#   - name: Initialize Swarm block
#     block:
#       -
#     when: 'when: 'managers_list | length == 0'
#   - name: Ensure managers and workers are in Swarm block:
#     block:
#       - name: Ensure manager is in swarm
#         community.docker.docker_swarm:
#           state: present
#         register: manager_metadata
#       - debug:
#           msg: "{{ manager_metadata }}"
#       - set_fact:
#           manager_token: "{{ manager_metadata.swarm_facts.JoinTokens.Manager }}"
#           worker_token: "{{ manager_metadata.swarm_facts.JoinTokens.Worker }}"
#     when: 'when: 'managers_list | length > 0'


# - hosts: testHosts
#   become: true
#   tasks:
#     - name: Ensure jq is installed in managers
#       package:
#         name: jq
#         state: present
#     - name: Ensure swarm is initialized in manager
#       community.docker.docker_swarm:
#         state: present
#       register: manager_metadata
#     - debug:
#         msg: "{{ manager_metadata }}"
#     - set_fact:
#         manager_token: "{{ manager_metadata.swarm_facts.JoinTokens.Manager }}"
#         worker_token: "{{ manager_metadata.swarm_facts.JoinTokens.Worker }}"
#     - shell: docker info -f {{ '"' + '{{json .Swarm.RemoteManagers }}' + '"' }} | jq '.[].Addr' | cut -d'"' -f 2
#       register: managers_addresses

# - hosts: testHosts
#   become: true
#   tasks:
#     - debug:
#         #msg: "{{ manager_token + '######' + worker_token }}"
#         msg: "{{ managers_addresses }}"


#     #- docker_host_info:
#       #register: result
#     #- debug:

