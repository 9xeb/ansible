- name: Pull pubkeys
  hosts: dockerHosts
  vars_files:
    - vars/main.yml
  roles:
    - 9xeb.pull-pubkeys

- name: Push pubkeys to backup host
  hosts: backupHosts
  vars_files:
    - vars/main.yml
  vars:
    ssh_user: borg
  pre_tasks:
    - name: Add unprivileged user for backups
      ansible.builtin.user:
        name: borg
        group: ssh
  roles:
    - 9xeb.push-pubkeys
  tasks:
    - name: Ensure borgbackup is installed on backup host
      package:
        name: borgbackup
        state: latest
      # check if AllowGroups line is present
    - command: grep "^AllowGroups " /etc/ssh/sshd_config
      ignore_errors: yes
      register: allowed_groups_list
        # check if AllowUsers line contains desired user
    - command: grep '^AllowGroups .*ssh.*' /etc/ssh/sshd_config
      ignore_errors: yes
      register: allowed_groups_list_with_ssh_group
    - name: Append ssh to SSH allowed groups
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "^AllowGroups .+"
        line: "{{ allowed_groups_list.stdout }} ssh"
      when:
        - allowed_groups_list.rc == 0
        - allowed_groups_list_with_ssh_group.rc != 0
    - name: Add AllowGroups line containing group ssh
      lineinfile:
        path: /etc/ssh/sshd_config
        line: AllowGroups ssh
      when:
        - allowed_groups_list.rc != 0

- name: Setup borg clients and servers
  hosts: all
  vars_files:
    - vars/main.yml
  tasks:
    - name: Configure backup cronjob in client
      include_role:
        name: m3nu.ansible_role_borgbackup
      vars:
        borg_repository: "{{ 'ssh://borg@' ~ item.1 ~ '/./' ~ inventory_hostname ~ '-' ~ item.0.repo_name }}"
        borg_source_directories: "{{ item.0.source_directories }}"
        borg_encryption_passphrase: "{{ item.0.repo_password }}"
        borgmatic_config_name: "{{ item.1 ~ '.yaml' }}"
        borg_retention_policy:
          keep_daily: 1
          keep_weekly: 1
          keep_monthly: 1
      loop: "{{ requested_backups|product(groups['backupHosts'])|list }}"
      when: "item.0.target in group_names"
    - name: Ensure all repos exist
      command: borgmatic -c /etc/borgmatic/{{ item.1 ~ '.yaml' }} init -e repokey
#      loop: "{{ groups['backupHosts'] }}"
      loop: "{{ requested_backups|product(groups['backupHosts'])|list }}"
      register: repo_check
      failed_when: 'repo_check.rc != 0 and not "exit status 2" in repo_check.stderr'
      when: "item.0.target in group_names"
